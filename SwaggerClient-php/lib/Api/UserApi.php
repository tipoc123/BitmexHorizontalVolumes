<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  -  ## All API Endpoints  Click to expand a section.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation userCancelWithdrawal
     *
     * Cancel a withdrawal.
     *
     * @param string $token  (required)
     * @return \Swagger\Client\Model\Transaction
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userCancelWithdrawal($token)
    {
        list($response) = $this->userCancelWithdrawalWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation userCancelWithdrawalWithHttpInfo
     *
     * Cancel a withdrawal.
     *
     * @param string $token  (required)
     * @return Array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userCancelWithdrawalWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling userCancelWithdrawal');
        }
        // parse inputs
        $resourcePath = "/user/cancelWithdrawal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction',
                '/user/cancelWithdrawal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userCheckReferralCode
     *
     * Check if a referral code is valid.
     *
     * @param string $referral_code  (optional)
     * @return double
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userCheckReferralCode($referral_code = null)
    {
        list($response) = $this->userCheckReferralCodeWithHttpInfo($referral_code);
        return $response;
    }

    /**
     * Operation userCheckReferralCodeWithHttpInfo
     *
     * Check if a referral code is valid.
     *
     * @param string $referral_code  (optional)
     * @return Array of double, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userCheckReferralCodeWithHttpInfo($referral_code = null)
    {
        // parse inputs
        $resourcePath = "/user/checkReferralCode";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($referral_code !== null) {
            $queryParams['referralCode'] = $this->apiClient->getSerializer()->toQueryValue($referral_code);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'double',
                '/user/checkReferralCode'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'double', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'double', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userConfirm
     *
     * Confirm your email address with a token.
     *
     * @param string $token  (required)
     * @return \Swagger\Client\Model\AccessToken
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirm($token)
    {
        list($response) = $this->userConfirmWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation userConfirmWithHttpInfo
     *
     * Confirm your email address with a token.
     *
     * @param string $token  (required)
     * @return Array of \Swagger\Client\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirmWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling userConfirm');
        }
        // parse inputs
        $resourcePath = "/user/confirmEmail";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AccessToken',
                '/user/confirmEmail'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AccessToken', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userConfirmEnableTFA
     *
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     *
     * @param string $token Token from your selected TFA type. (required)
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)
     * @return bool
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirmEnableTFA($token, $type = null)
    {
        list($response) = $this->userConfirmEnableTFAWithHttpInfo($token, $type);
        return $response;
    }

    /**
     * Operation userConfirmEnableTFAWithHttpInfo
     *
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     *
     * @param string $token Token from your selected TFA type. (required)
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39; (optional)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirmEnableTFAWithHttpInfo($token, $type = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling userConfirmEnableTFA');
        }
        // parse inputs
        $resourcePath = "/user/confirmEnableTFA";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/user/confirmEnableTFA'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userConfirmWithdrawal
     *
     * Confirm a withdrawal.
     *
     * @param string $token  (required)
     * @return \Swagger\Client\Model\Transaction
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirmWithdrawal($token)
    {
        list($response) = $this->userConfirmWithdrawalWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation userConfirmWithdrawalWithHttpInfo
     *
     * Confirm a withdrawal.
     *
     * @param string $token  (required)
     * @return Array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userConfirmWithdrawalWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling userConfirmWithdrawal');
        }
        // parse inputs
        $resourcePath = "/user/confirmWithdrawal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction',
                '/user/confirmWithdrawal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userDisableTFA
     *
     * Disable two-factor auth for this account.
     *
     * @param string $token Token from your selected TFA type. (required)
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     * @return bool
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userDisableTFA($token, $type = null)
    {
        list($response) = $this->userDisableTFAWithHttpInfo($token, $type);
        return $response;
    }

    /**
     * Operation userDisableTFAWithHttpInfo
     *
     * Disable two-factor auth for this account.
     *
     * @param string $token Token from your selected TFA type. (required)
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userDisableTFAWithHttpInfo($token, $type = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling userDisableTFA');
        }
        // parse inputs
        $resourcePath = "/user/disableTFA";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/user/disableTFA'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGet
     *
     * Get your user model.
     *
     * @return \Swagger\Client\Model\User
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGet()
    {
        list($response) = $this->userGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation userGetWithHttpInfo
     *
     * Get your user model.
     *
     * @return Array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/user'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetAffiliateStatus
     *
     * Get your current affiliate/referral status.
     *
     * @return \Swagger\Client\Model\Affiliate[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetAffiliateStatus()
    {
        list($response) = $this->userGetAffiliateStatusWithHttpInfo();
        return $response;
    }

    /**
     * Operation userGetAffiliateStatusWithHttpInfo
     *
     * Get your current affiliate/referral status.
     *
     * @return Array of \Swagger\Client\Model\Affiliate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetAffiliateStatusWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user/affiliateStatus";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Affiliate[]',
                '/user/affiliateStatus'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Affiliate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Affiliate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetCommission
     *
     * Get your account's commission status.
     *
     * @return \Swagger\Client\Model\UserCommission[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetCommission()
    {
        list($response) = $this->userGetCommissionWithHttpInfo();
        return $response;
    }

    /**
     * Operation userGetCommissionWithHttpInfo
     *
     * Get your account's commission status.
     *
     * @return Array of \Swagger\Client\Model\UserCommission[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetCommissionWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user/commission";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserCommission[]',
                '/user/commission'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserCommission[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserCommission[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetDepositAddress
     *
     * Get a deposit address.
     *
     * @param string $currency  (optional, default to XBt)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetDepositAddress($currency = null)
    {
        list($response) = $this->userGetDepositAddressWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userGetDepositAddressWithHttpInfo
     *
     * Get a deposit address.
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetDepositAddressWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/depositAddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/user/depositAddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetMargin
     *
     * Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     *
     * @param string $currency  (optional, default to XBt)
     * @return \Swagger\Client\Model\Margin
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetMargin($currency = null)
    {
        list($response) = $this->userGetMarginWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userGetMarginWithHttpInfo
     *
     * Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of \Swagger\Client\Model\Margin, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetMarginWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/margin";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Margin',
                '/user/margin'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Margin', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Margin', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetWallet
     *
     * Get your current wallet information.
     *
     * @param string $currency  (optional, default to XBt)
     * @return \Swagger\Client\Model\Wallet
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWallet($currency = null)
    {
        list($response) = $this->userGetWalletWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userGetWalletWithHttpInfo
     *
     * Get your current wallet information.
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of \Swagger\Client\Model\Wallet, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWalletWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/wallet";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Wallet',
                '/user/wallet'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Wallet', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Wallet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetWalletHistory
     *
     * Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * @param string $currency  (optional, default to XBt)
     * @return \Swagger\Client\Model\Transaction[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWalletHistory($currency = null)
    {
        list($response) = $this->userGetWalletHistoryWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userGetWalletHistoryWithHttpInfo
     *
     * Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of \Swagger\Client\Model\Transaction[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWalletHistoryWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/walletHistory";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction[]',
                '/user/walletHistory'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetWalletSummary
     *
     * Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * @param string $currency  (optional, default to XBt)
     * @return \Swagger\Client\Model\Transaction[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWalletSummary($currency = null)
    {
        list($response) = $this->userGetWalletSummaryWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userGetWalletSummaryWithHttpInfo
     *
     * Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of \Swagger\Client\Model\Transaction[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userGetWalletSummaryWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/walletSummary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction[]',
                '/user/walletSummary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userLogout
     *
     * Log out of BitMEX.
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userLogout()
    {
        list($response) = $this->userLogoutWithHttpInfo();
        return $response;
    }

    /**
     * Operation userLogoutWithHttpInfo
     *
     * Log out of BitMEX.
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userLogoutWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user/logout";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/user/logout'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userLogoutAll
     *
     * Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
     *
     * @return double
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userLogoutAll()
    {
        list($response) = $this->userLogoutAllWithHttpInfo();
        return $response;
    }

    /**
     * Operation userLogoutAllWithHttpInfo
     *
     * Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
     *
     * @return Array of double, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userLogoutAllWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/user/logoutAll";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'double',
                '/user/logoutAll'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'double', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'double', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userMinWithdrawalFee
     *
     * Get the minimum withdrawal fee for a currency.
     *
     * @param string $currency  (optional, default to XBt)
     * @return double
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userMinWithdrawalFee($currency = null)
    {
        list($response) = $this->userMinWithdrawalFeeWithHttpInfo($currency);
        return $response;
    }

    /**
     * Operation userMinWithdrawalFeeWithHttpInfo
     *
     * Get the minimum withdrawal fee for a currency.
     *
     * @param string $currency  (optional, default to XBt)
     * @return Array of double, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userMinWithdrawalFeeWithHttpInfo($currency = null)
    {
        // parse inputs
        $resourcePath = "/user/minWithdrawalFee";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'double',
                '/user/minWithdrawalFee'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'double', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'double', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userRequestEnableTFA
     *
     * Get secret key for setting up two-factor auth.
     *
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     * @return bool
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userRequestEnableTFA($type = null)
    {
        list($response) = $this->userRequestEnableTFAWithHttpInfo($type);
        return $response;
    }

    /**
     * Operation userRequestEnableTFAWithHttpInfo
     *
     * Get secret key for setting up two-factor auth.
     *
     * @param string $type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator) (optional)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userRequestEnableTFAWithHttpInfo($type = null)
    {
        // parse inputs
        $resourcePath = "/user/requestEnableTFA";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/user/requestEnableTFA'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userRequestWithdrawal
     *
     * Request a withdrawal to an external wallet.
     *
     * @param string $currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; (required)
     * @param float $amount Amount of withdrawal currency. (required)
     * @param string $address Destination Address. (required)
     * @param string $otp_token 2FA token. Required if 2FA is enabled on your account. (optional)
     * @param double $fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
     * @return \Swagger\Client\Model\Transaction
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userRequestWithdrawal($currency, $amount, $address, $otp_token = null, $fee = null)
    {
        list($response) = $this->userRequestWithdrawalWithHttpInfo($currency, $amount, $address, $otp_token, $fee);
        return $response;
    }

    /**
     * Operation userRequestWithdrawalWithHttpInfo
     *
     * Request a withdrawal to an external wallet.
     *
     * @param string $currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60; (required)
     * @param float $amount Amount of withdrawal currency. (required)
     * @param string $address Destination Address. (required)
     * @param string $otp_token 2FA token. Required if 2FA is enabled on your account. (optional)
     * @param double $fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email. (optional)
     * @return Array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userRequestWithdrawalWithHttpInfo($currency, $amount, $address, $otp_token = null, $fee = null)
    {
        // verify the required parameter 'currency' is set
        if ($currency === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency when calling userRequestWithdrawal');
        }
        // verify the required parameter 'amount' is set
        if ($amount === null) {
            throw new \InvalidArgumentException('Missing the required parameter $amount when calling userRequestWithdrawal');
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling userRequestWithdrawal');
        }
        // parse inputs
        $resourcePath = "/user/requestWithdrawal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($otp_token !== null) {
            $formParams['otpToken'] = $this->apiClient->getSerializer()->toFormValue($otp_token);
        }
        // form params
        if ($currency !== null) {
            $formParams['currency'] = $this->apiClient->getSerializer()->toFormValue($currency);
        }
        // form params
        if ($amount !== null) {
            $formParams['amount'] = $this->apiClient->getSerializer()->toFormValue($amount);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($fee !== null) {
            $formParams['fee'] = $this->apiClient->getSerializer()->toFormValue($fee);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction',
                '/user/requestWithdrawal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userSavePreferences
     *
     * Save user preferences.
     *
     * @param string $prefs  (required)
     * @param bool $overwrite If true, will overwrite all existing preferences. (optional, default to false)
     * @return \Swagger\Client\Model\User
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userSavePreferences($prefs, $overwrite = null)
    {
        list($response) = $this->userSavePreferencesWithHttpInfo($prefs, $overwrite);
        return $response;
    }

    /**
     * Operation userSavePreferencesWithHttpInfo
     *
     * Save user preferences.
     *
     * @param string $prefs  (required)
     * @param bool $overwrite If true, will overwrite all existing preferences. (optional, default to false)
     * @return Array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userSavePreferencesWithHttpInfo($prefs, $overwrite = null)
    {
        // verify the required parameter 'prefs' is set
        if ($prefs === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prefs when calling userSavePreferences');
        }
        // parse inputs
        $resourcePath = "/user/preferences";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($prefs !== null) {
            $formParams['prefs'] = $this->apiClient->getSerializer()->toFormValue($prefs);
        }
        // form params
        if ($overwrite !== null) {
            $formParams['overwrite'] = $this->apiClient->getSerializer()->toFormValue($overwrite);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/user/preferences'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userUpdate
     *
     * Update your password, name, and other attributes.
     *
     * @param string $firstname  (optional)
     * @param string $lastname  (optional)
     * @param string $old_password  (optional)
     * @param string $new_password  (optional)
     * @param string $new_password_confirm  (optional)
     * @param string $username Username can only be set once. To reset, email support. (optional)
     * @param string $country Country of residence. (optional)
     * @param string $pgp_pub_key PGP Public Key. If specified, automated emails will be sentwith this key. (optional)
     * @return \Swagger\Client\Model\User
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userUpdate($firstname = null, $lastname = null, $old_password = null, $new_password = null, $new_password_confirm = null, $username = null, $country = null, $pgp_pub_key = null)
    {
        list($response) = $this->userUpdateWithHttpInfo($firstname, $lastname, $old_password, $new_password, $new_password_confirm, $username, $country, $pgp_pub_key);
        return $response;
    }

    /**
     * Operation userUpdateWithHttpInfo
     *
     * Update your password, name, and other attributes.
     *
     * @param string $firstname  (optional)
     * @param string $lastname  (optional)
     * @param string $old_password  (optional)
     * @param string $new_password  (optional)
     * @param string $new_password_confirm  (optional)
     * @param string $username Username can only be set once. To reset, email support. (optional)
     * @param string $country Country of residence. (optional)
     * @param string $pgp_pub_key PGP Public Key. If specified, automated emails will be sentwith this key. (optional)
     * @return Array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userUpdateWithHttpInfo($firstname = null, $lastname = null, $old_password = null, $new_password = null, $new_password_confirm = null, $username = null, $country = null, $pgp_pub_key = null)
    {
        // parse inputs
        $resourcePath = "/user";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($firstname !== null) {
            $formParams['firstname'] = $this->apiClient->getSerializer()->toFormValue($firstname);
        }
        // form params
        if ($lastname !== null) {
            $formParams['lastname'] = $this->apiClient->getSerializer()->toFormValue($lastname);
        }
        // form params
        if ($old_password !== null) {
            $formParams['oldPassword'] = $this->apiClient->getSerializer()->toFormValue($old_password);
        }
        // form params
        if ($new_password !== null) {
            $formParams['newPassword'] = $this->apiClient->getSerializer()->toFormValue($new_password);
        }
        // form params
        if ($new_password_confirm !== null) {
            $formParams['newPasswordConfirm'] = $this->apiClient->getSerializer()->toFormValue($new_password_confirm);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($pgp_pub_key !== null) {
            $formParams['pgpPubKey'] = $this->apiClient->getSerializer()->toFormValue($pgp_pub_key);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/user'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
